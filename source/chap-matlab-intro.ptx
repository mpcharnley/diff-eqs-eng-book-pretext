<?xml version="1.0" encoding="UTF-8" ?>
<!-- Generated by Pandoc using pretext.lua -->



	<chapter xml:id="matlab-appendix">
		<title>Introduction to MATLAB</title>
<introduction>
		<p>
			This document is meant to provide a review of some of the main skills and techniques in MATLAB that are necessary to complete the various MATLAB assignments throughout the course. In addition, these skills will be useful when attempting to use MATLAB, both for illustrating problems in differential equations and for solving other types of problems that can be analyzed using this software.
		</p>
	</introduction>

		<section xml:id="the-matlab-interface">
			<title>The MATLAB Interface</title>

			<p>
				There are many components to the MATLAB interface, and the way that the window is organized can be fully customized. There are four main components of this interface.
			</p>

			<p><ol>
				<li>
							<p>
								Current Folder window. This shows the current folder in which MATLAB is running. This determines what files that MATLAB currently has access to and what functions and methods can be called.
							</p>
				</li>

				<li>
							<p>
								Editor window. This is the main code-editing window, where script files can be written, edited, saved, and run.
							</p>
				</li>

				<li>
							<p>
								Command window. This is where individual lines of code can be entered to see how they work.
							</p>
				</li>

				<li>
							<p>
								Workspace window. This shows a list of all variables that currently exist, as well as their values or sizes.
							</p>
				</li>

			</ol></p>



			<p>
				All four of these components are very useful in organizing thoughts and programming practices while using MATLAB. Both the Default layout and Two-Column layout (as of MATLAB R2019b) contain all four of these windows in different locations. Either of these will work for programming in MATLAB, as well as any modifications of them. The current format can be saved using Layout - Save Layout if needed.
			</p>

		</section>
			<section xml:id="file-structure">
				<title>File Structure</title>

				<p>
					The main type of file used in MATLAB is the Script file. These are saved as <sq>*.m</sq> files and can represent both stand-alone executable files and functions that can be called from other scripts. For running simple, one-line expressions or debugging code, the Command Window and the command line prompt can be useful. However, for anything more involved and complicated than that, the script editor should be used instead.
				</p>

				<p>
					In writing a script file or using the Command window, the Current Folder window shows all of the files in the current directory. These are all of the files that MATLAB has access to while running a MATLAB file that it saved in that folder. This means that if a script wants to call a method, it either needs to be a built-in method or a function file that is contained within the same script file or the Current Folder. For more information about writing functions, see Section <xref ref="funMat-section" />.
				</p>

				<p>
					To use script files, multiple lines of code can be entered in a row, and MATLAB will execute them in sequence when the <q>Run</q> button is clicked. This button is in the <q>Editor</q> tab at the top of the screen.
				</p>



				<p>
					MATLAB Live Scripts can also be used to do very similar things, with some additional benefits. These allow the MATLAB code to be viewed side-by-side with the output, as well as an easy export to PDF functionality. These are saved as <sq>*.mlx</sq> files. These work the same way as scripts in terms of how code is written, and allow the user to mix between text (which can be resized and formatted) and code. For more information on Live Scripts, see the website <url href="https://www.mathworks.com/help/matlab/matlab_prog/what-is-a-live-script-or-function.html">https://www.mathworks.com/help/matlab/matlab_prog/what-is-a-live-script-or-function.html</url>.
				</p>

				<p>
					Live Scripts also have the ability to put section breaks between different pieces of code and then run individual sections using the â€œRun Section" button at the top of the editor. With Live Scripts, it is necessary to run the entire code (by clicking the run button) before exporting as a PDF in order to get the correct images and outputs in the final PDF. To export, go to Save at the top of the screen, click the down arrow under it, and select <q>Export to PDF</q> <term>after</term> running the code to regenerate all of the images.
				</p>



			</section>

		<section xml:id="computation-in-matlab">
			<title>Computation in MATLAB</title>

			<p>
				MATLAB can do many of the simple computational operations that would be expected from a calculator. It is easiest to see these operations by using the Command Window, but they can also be implemented in scripts if desired. Addition and subtraction work in standard ways. In the command line, typing
			</p>

<!-- div attr= class="matlab"-->
			<p>
				2 + 3
			</p><!--</div attr= class="matlab">-->

			<p>
				and pressing ENTER will give an output of
			</p>

<!-- div attr= class="matlab"-->
			<p>
				ans = 5
			</p><!--</div attr= class="matlab">-->

			<p>
				showing the answer of this computation. For any computation or line of code, putting a semi-colon (;) at the end will suppress the output, in that typing
			</p>

<!-- div attr= class="matlab"-->
			<p>
				2 + 3;
			</p><!--</div attr= class="matlab">-->

			<p>
				will not show any output. However, MATLAB did do the computation, which can be shown by storing this output in a variable and doing something with it later.
			</p>

			<p>
				Multiplication and division, and by extension powers, can work differently in MATLAB. As MATLAB is built around using matrices for calculations and is optimized for this approach, the program interprets all multiplication, division, and exponentiation in terms of matrices as a default. Both components of the multiplication are simple scalars (numbers), then this is fine. The <sq>*</sq> symbol works for multiplication in this context:
			</p>

<!-- div attr= class="matlab"-->
			<p>
				&gt;&gt; 4*6 ans = 24
			</p><!--</div attr= class="matlab">-->

			<p>
				as well as using <sq>/</sq> for division and <sq>^</sq> for exponentiation. Issues may arise when the code wants to compute products or powers of multiple values at the same time. Many MATLAB built-in functions will automatically combine multiple of the same type of calculation into a <sq>vectorized</sq> calculation, where if the code wanted to compute the sum of two numbers a bunch of times, it would put all of these numbers into arrays and then add the two vectors together. This completes the task of adding all of the different pairs of numbers together, but saves time by not doing them all individually. This works great for addition and subtraction, because addition and subtraction of arrays or matrices is done element-wise, which is the exact operation we wanted to compute in the first place.
			</p>

			<p>
				However, mutliplication is different. Matrix multiplication is a different operation that, in particular, is not element-wise multiplication. Beyond that, even if two matrices are the same size, it is possible that their product, in the normal matrix sense, is not defined. In MATLAB, the product
			</p>

<!-- div attr= class="matlab"-->
			<p>
				* [4 3 2];
			</p><!--</div attr= class="matlab">-->

			<p>
				will return an error because the matrices are not the correct size. From a human point of view, the output desired from this code was likely <c>[4 6 6]</c>, the product of each term individually. To obtain this in MATLAB, we need the elementwise operations <sq>.*</sq>, <sq>./</sq> and <sq>.^</sq> for multipication, division, and exponentiation, respectively. Thus, the following computations can be made in MATLAB
			</p>

<!-- div attr= class="matlab"-->
			<p>
				&gt;&gt; [1 2 3] .* [4 3 2] ans = [4 6 6] &gt;&gt; [1 4 6].^2 ans = [1 16 36] &gt;&gt; [5 4 2] ./ [10 2 6] ans = [0.5 2 0.3333]
			</p><!--</div attr= class="matlab">-->

			<p>
				There are many built-in functions in MATLAB that can help with computation and algebra.
			</p>

			<p><ul>
				<li>
							<p>
								<c>sqrt(x)</c> will compute the square root of a number <m>x</m>.
							</p>
				</li>

				<li>
							<p>
								<c>exp(x)</c> will compute <m>e^x</m> for <m>e</m> the base of the natural logarithm, and <m>x</m> any number. Note that MATLAB does not know the definition of <m>e</m> built-in, so it will either need to be defined (using <c>exp(1)</c>) or just use <c>exp()</c> whenever it is needed.
							</p>
				</li>

				<li>
							<p>
								<c>abs(x)</c> computes the absolute value of a number <m>x</m>.
							</p>
				</li>

				<li>
							<p>
								<c>log(x)</c> computes the natural logarithm of a number <m>x</m>. The functions <c>log2</c> and <c>log10</c> compute the log base 2 and log base 10 respectively.
							</p>
				</li>

				<li>
							<p>
								Trigonometric functions can also be computed with <c>sin(x)</c>, <c>cos(x)</c>, and <c>tan(x)</c>.
							</p>
				</li>

			</ul></p>

		</section>

		<section xml:id="variables-and-arrays">
			<title>Variables and Arrays</title>

			<p>
				As with other programming languages, MATLAB utilizes variables to store information and use it later. The name of variables in MATLAB must start with a letter, but the rest of the name can consist of letters, digits, or underscores. Variables should be named suggestively corresponding to what this information is or the way it will be used. Variables do not need to be created in advance, they are created when something is stored in the variable by putting the name on the left side of an equals sign, with the computation that gives rise to that variable on the right. Even though the output is suppressed, the line
			</p>

<!-- div attr= class="matlab"-->
			<p>
				val = 2+3;
			</p><!--</div attr= class="matlab">-->

			<p>
				will store the value 5 in the variable <c>val</c>, where it can be used later. For example,
			</p>

<!-- div attr= class="matlab"-->
			<p>
				&gt;&gt; val * 4 ans = 20
			</p>

			<p>
				&gt;&gt; val^2 + 2 ans = 27
			</p><!--</div attr= class="matlab">-->

			<p>
				However, trying to use a variable name without defining it first will cause MATLAB to give an error:
			</p>

<!-- div attr= class="matlab"-->
			<p>
				&gt;&gt; r Undefined function or variable â€™râ€™.
			</p><!--</div attr= class="matlab">-->

			<p>
				As variables do not need to be created or instantiated before they are used, any variable can store any type of information. Two of the most common ones are numbers (double precision) or strings.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				numVar = sqrt(15); strVar = <q>Hello World!</q>;
			</p><!--</div attr= class="matlab">-->

			<p>
				Strings can be stored using either single or double quotes. Strings also have a lot of useful operations that can be used to make some MATLAB programs run more simply, but they are beyond the scope of this introduction. For information about what can be done with strings, see the MATLAB documentation <url href="https://www.mathworks.com/help/matlab/ref/string.html">https://www.mathworks.com/help/matlab/ref/string.html</url>.
			</p>

			<p>
				Another common variable data type that MATLAB is very comfortable with is arrays. As described previously, MATLAB defaults to matrices when considering multiplication and exponentiation operations. Arrays can be created using square brackets, with either spaces or commas between the entries.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				A = [2,4,6]; B = [1 3 5];
			</p><!--</div attr= class="matlab">-->

			<p>
				These create horizontal arrays. Vertical arrays can also be created using semi-colons between each entry, and these can be combined with horizontal arrays to create a matrix, or rectangular array of values.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				C = [5;7;8]; M = [1,2,3;5,6,7];
			</p><!--</div attr= class="matlab">-->

			<p>
				In these examples, <m>A</m> and <m>B</m> will be row arrays (or row vectors) with 3 elements, <m>C</m> will be a column vector with <m>3</m> elements, and <m>M</m> will be a matrix with two rows and three columns. For most situations that donâ€™t involve matrices, row and column vectors will work equivalently, so either one can be used. Once matrices are involved, it matters which one is chosen, because MATLAB will multiply matrices and vectors in the same way that would be carried out mathematically, which means the dimensions need to match.
			</p>

			<p>
				To access elements of a matrix, parentheses are used. Unlike other programming languages, MATLAB starts indexing elements at 1, not zero. That is, with the above variables <c>C(2) = 7</c>, since <m>7</m> is the second element of the array <m>C</m>. In terms of accessing elements of matrices, the first index is the row and the second is the column.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				&gt;&gt; M = [1,2,3;5,6,7]; &gt;&gt; M(1,1) ans = 1
			</p>

			<p>
				&gt;&gt; M(1,3) ans = 3
			</p>

			<p>
				&gt;&gt; M(2,1) ans = 5
			</p><!--</div attr= class="matlab">-->

			<p>
				The matrix (and vectors) do have limits on how big they are, and attempting to access an element outside of that range will cause MATLAB to give an error.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				&gt;&gt; M(3,1) Index in position 1 exceeds array bounds (must not exceed 2).
			</p><!--</div attr= class="matlab">-->

			<p>
				Among many other possible variables, another type that can be stored is a handle to a function. How to use functions will be described in Section <xref ref="funMat-section" />. The fact that all of these different data types can be stored in variables, with no real indication as to which type a given variable is, means it is critical to name variables carefully with what they correspond to.
			</p>

		</section>

		<section xml:id="funMat-section">
			<title>Functions and Anonymous Functions</title>

			<p>
				A key component to programming in MATLAB is the idea of functions. These are programming objects that will accept a number of inputs (called <em>arguments</em>) and perform a given set of operations on those arguments, returning some set of ouputs back to the main program. These are mainly used to group code together that has a given purpose and can be called to carry out that purpose on a variety of outputs. An example of a built-in function like this is <c>sum(V)</c>. This function takes in a linear array and will return the number that is the sum of all of the elements in the array (if the array is multi-dimensional, it will only sum along one dimension). This is a piece of code that could be written fairly easily; it would just involve taking the array, looping through it and adding up the value at each index. However, putting it into a function allows it to be called more simply in one line, allowing the main script to focus on the task at hand.
			</p>

			<p>
				There are two main ways that functions can be written in MATLAB. Functions can either be written at the bottom of the MATLAB script where they will be used or they can be written in their own separate script file. If written in a separate file, there can only be one function in each file, and the name of the file (once saved) must match the name given to the function. To write a function, the reserved word <sq>function</sq> is used:
			</p>

<!-- div attr= class="matlab"-->
			<p>
				function [a,b] = testFunction(x, y, z) end
			</p><!--</div attr= class="matlab">-->

			<p>
				<term>Note:</term> If this is done in a script by itself, the function line must be the first line of the code. There can be no code or comments above this line.
			</p>

			<p>
				In this case, the function takes in three inputs and returns two outputs. When writing the code inside the function, the three inputs will be called x, y, and z, and in order to tell the program what to send back to wherever this function was called, those outputs should be stored in variables a and b. For example, a function that takes in three numbers and returns their sum in the first output and the product in the second would look like
			</p>

<!-- div attr= class="matlab"-->
			<p>
				function [a,b] = testFunction(x, y, z) a = x+y+z; b = x*y*z; end
			</p><!--</div attr= class="matlab">-->

			<p>
				and that would work just fine. However, if any other MATLAB methods were going to use this function, there is a chance they would try to pass in array inputs. If so, then there would be an error in computing <c>b</c>, because those products would not be defined. The easiest way to fix this would be to use element-wise products, giving a function that looks like
			</p>

<!-- div attr= class="matlab"-->
			<p>
				function [a,b] = testFunction(x, y, z) a = x+y+z; b = x.*y.*z; end
			</p><!--</div attr= class="matlab">-->

			<p>
				These functions can be as complicated as necessary, including graphs, loops, calls to other functions, and many different components. However, if the function needed is a simple mathematical function, then this can be written in an shorter way with anonymous functions. For example, if the function <m>f(x,y) = x^2 + 4xy + y^2</m> needed to be coded, it could be written as
			</p>

<!-- div attr= class="matlab"-->
			<p>
				f = @(x,y) x.^2 + 4.*x.*y + y.^2;
			</p><!--</div attr= class="matlab">-->

			<p>
				and this will now make <c>f</c> a handle to the function that does exactly what is desired. If a later line of code is
			</p>

<!-- div attr= class="matlab"-->
			<p>
				&gt;&gt; f(2,1) ans = 13
			</p><!--</div attr= class="matlab">-->

			<p>
				the function value will be computed at the desired point. Notice the use of element-wise operations again in this function definition to ensure that it will also work on array inputs. This works for these simple kinds of functions, and can be easier than adding an entire new function to the script file.
			</p>

			<p>
				Overall, the following two function definitions are <em>almost</em> equivalent.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				fShort = @(x,y) x.^2 + y.^2;
			</p><!--</div attr= class="matlab">-->

<!-- div attr= class="matlab"-->
			<p>
				function z = fLong(x,y) z = x.^2 + y.^2; end
			</p><!--</div attr= class="matlab">-->

			<p>
				The only difference arises when trying to use these functions in built-in or written methods that require a handle to a function. The <sq>@</sq> symbol at the beginning of the anonymous function indicates that the thing being defined (<c>fShort</c>) is a handle to a function that takes two inputs and computes an output from it. On the other hand, the definition of <c>fLong</c> is a function that does this, and is not a handle to that function. To fix this, an <sq>@</sq> symbol needs to be put in-front of <c>fLong</c> before using it in one of these methods. As an example <c>ode45</c> is a method that numerically computes the solution to a differential equation, and it requires a function handle in the first argument. So, the code
			</p>

<!-- div attr= class="matlab"-->
			<p>
				ode45(fShort, [0, 3], 1)
			</p><!--</div attr= class="matlab">-->

			<p>
				runs fine. However,
			</p>

<!-- div attr= class="matlab"-->
			<p>
				ode45(fLong, [0, 3], 1)
			</p><!--</div attr= class="matlab">-->

			<p>
				throws an error about there being not enough inputs for <c>fLong</c>. This is because whenever MATLAB sees <c>fLong</c>, it is expecting to see two inputs next to it. This is not the case for <c>fShort</c> because of the way it was defined. To remedy this, the code needs to be written
			</p>

<!-- div attr= class="matlab"-->
			<p>
				ode45(@fLong, [0, 3], 1)
			</p><!--</div attr= class="matlab">-->

			<p>
				and then it will execute the same as the first line.
			</p>

			<p>
				With any of these functions, it is possible to restrict variables and get new functions. This can be fairly easily done with the same setup as for anonymous functions. The line of code
			</p>

<!-- div attr= class="matlab"-->
			<p>
				fNew = @(y) fShort(1,y)
			</p><!--</div attr= class="matlab">-->

			<p>
				will create a new handle for a function of one variable that is <c>fShort</c> when the <m>x</m> value is fixed to be 1. The exact same code will work for <c>fLong</c> as you are giving it two inputs.
			</p>

		</section>

		<section xml:id="loops-and-branching-statements">
			<title>Loops and Branching Statements</title>
<introduction>
			<p>
				The code written in a MATLAB script will always proceed in order from one line to the next unless there is some alteration to the flow using loops or branching (if) statements.
			</p>
		</introduction>

			<subsection xml:id="for-loops">
				<title>For Loops</title>

				<p>
					For loops are a form of iterative programming, where MATLAB will run the same bit of code multiple times with an iterative parameter that can change certain things about the code. If there is an element of the program that needs to carry out a process several times in a row, particularly using the previous step to compute the one after it, a for loop might be the best structure to use. A sample for loop has the following form:
				</p>

<!-- div attr= class="matlab"-->
				<p>
					for counter = 1:1:10 end
				</p><!--</div attr= class="matlab">-->

				<p>
					In this line, <c>counter</c> is the variable that is getting incremented over the list. The rest of that line says that counter starts at 1, increments by 1 each loop, and stops after 10. A line of the form <c>counter = 2:5:34</c> will start at 2, increment by 5 each loop, and stop once the counter gets above 34, so after the iteration when <c>counter = 32</c>.
				</p>

				<p>
					In order to loop through an array of values, it is useful to figure out the size of the array and use that to determine how many times the loop should be run. This sort of programming will allow your code to work for a variety of different inputs, no matter the size. This can be done with code like this.
				</p>

<!-- div attr= class="matlab"-->
				<p>
					v = [1,2,3,4,5]; for counter = 1:1:length(v) x = v(counter)^2 end
				</p><!--</div attr= class="matlab">-->

				<p>
					To find how many elements are in an array, the <c>length</c> function will work for a linear array. If the array is more complicated, the <c>size</c> function can be used. This will give a list of values saying how large the array is in each dimension.
				</p>

				<p>
					MATLAB also has <c>while</c> loops, which allow a loop to run up until a condition becomes false. This is better than for loops in specific situations, but either one can be used. For the code developed here, for loops will be just as easy to write as while loops.
				</p>

			</subsection>

			<subsection xml:id="if-statements">
				<title>If Statements</title>

				<p>
					If statements, or conditional statements, allow certain parts of code to be executed only if a certain condition is met. For instance, something like
				</p>

<!-- div attr= class="matlab"-->
				<p>
					if counter &lt; 5 end
				</p><!--</div attr= class="matlab">-->

				<p>
					will only execute if the counter is less than 5, and
				</p>

<!-- div attr= class="matlab"-->
				<p>
					if mod(counter,2) == 0 end
				</p><!--</div attr= class="matlab">-->

				<p>
					will only run if counter is even, that is, if the remainder when dividing counter by 2 is zero. Notice that <c>==</c> is used for comparison here to check if two things are equal, while <c>=</c> is used for variable assignment. The condition part of an if statement can be anything that gives back a true or false result. For math operations, these can be any inequalities (<m>\leq, \ &lt;,\ \geq, \ &gt;</m>) or <c>==</c> for testing inequality. The operator <m>\sim</m> is used for <q>not</q>, in that <m>a \sim= b</m> will be true if <m>a</m> is not equal to <m>b</m>, and false if they are the same. Outside of numbers, there are other MATLAB methods that will give true or false answers. These can be things like comparing strings, but this is beyond the code developed here.
				</p>

			</subsection>
		</section>

		<section xml:id="plotting-in-matlab">
			<title>Plotting in MATLAB</title>

			<p>
				Graphing in MATLAB always involves plotting a set of points, but these can be fairly easily generated from functions as well. For example
			</p>

<!-- div attr= class="matlab"-->
			<p>
				xPts = [1,2,3,4,5]; fx = @(x) x.^2 + 2; yPts = [2,3,2,3,1]; figure(1); plot(xPts, yPts); figure(2); plot(xPts, fx(xPts));
			</p><!--</div attr= class="matlab">-->



			<p>
				will generate two figures, referred to by the lines <c>figure(1)</c> and <c>figure(2)</c>, and allow the two graphs to be simultaneously drawn without overlapping each other. Any time MATLAB draws a plot (with the <c>plot</c> command) it will overwrite any plot that is already on the target figure. In order to put multiple plots on the same figure, the <c> hold on;</c> and <c> hold off;</c> commands can be used.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				xPts = linspace(1,5,100); fx = @(x) x.^2 + 2; gx = @(x) x.^2 - 3*x + 7; figure(1); hold on; plot(xPts, fx(xPts)); plot(xPts, gx(xPts)); hold off;
			</p><!--</div attr= class="matlab">-->



			<p>
				The <c>linspace</c> generates a list of 100 equally spaced values between 1 and 5 for plotting purposes. It gives an easy way to generate a lot of input values for plotting a smooth-looking graph. It also emphasizes the need to use the element-wise operations in these functions to make sure they all compute correctly.
			</p>

			<p>
				There are many additional options that can be passed to the <c>plot</c> method in order to change the color, shape, and size of the plot. For these options, refer to the MATLAB documentation on the plot function at <url href="https://www.mathworks.com/help/matlab/ref/plot.html">https://www.mathworks.com/help/matlab/ref/plot.html</url>.
			</p>

		</section>

		<section xml:id="supplemental-code-files">
			<title>Supplemental Code Files</title>

			<p>
				There are eleven supplemental code files provided. In order to use these files in a script or a Live Script, they must be placed in the same folder as the script file, so that the Current Folder window contains both the file being executed and all of these function files. Another option would be to store all of these function files in a single folder, navigating to that folder in the MATLAB Current Folder window, right-clicking on the folder, and selecting <q>Add to Path.</q> The first of these is more recommended, but the second can also work if there is a common repository to store all of the users custom MATLAB functions. The function headers are given below along with a brief description of their use.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				function quiver244(f, t_min, t_max, y_min, y_max, col)
			</p><!--</div attr= class="matlab">-->

			<p>
				The main point of this function is to simplify the process of drawing quiver plots. The code here takes care of the difficulties that arise from the built-in <c>quiver</c> function in MATLAB and allows the user to input the right-hand side of a first order ODE and generate quiver plots. It will draw a quiver plot in the first figure, and a normalized quiver plot (all vectors the same length) in the second figure. It can sometimes be easier to see the general trajectory of solutions from the normalized figure, so both graphs are provided. All of the plotting commands use the <c>hold</c> commands so that they will not overwrite anything on the desired figures. This allows the overlaying of multiple plots, but means that the code calling this method must clear the figure if it needs to be cleared.
			</p>

			<p>
				This code can be used as
			</p>

<!-- div attr= class="matlab"-->
			<p>
				f = @(t,y) t - exp(y); quiver244(f, 0, 5, -6, 6, â€™bâ€™);
			</p><!--</div attr= class="matlab">-->

<!-- div attr= class="matlab"-->
			<p>
				quiver244(@f2, 0, 5, -6, 6, â€™bâ€™);
			</p>

			<p>
				function z = f2(t,y) z = t - exp(y); end
			</p><!--</div attr= class="matlab">-->



			<p>
				In each case, the <c>â€˜bâ€™</c> indicates that the quiver plot will be drawn in blue, and the 1 before that indicates that the two plots will be drawn on figures 1 and 2.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				function samplePlots244(f, t_min, t_max, y_min, y_max, t_0, y_0, col)
			</p><!--</div attr= class="matlab">-->

			<p>
				This function follows the same setup as <c>quiver244</c>, but draws sample trajectories of the solution instead of the quiver plot. It will take initial conditions as <m>(t_0, y_0)</m>. For a single <m>t_0</m>, a vector of initial <m>y_0</m> values can be passed in and the function will work correctly. This function can be used as
			</p>

<!-- div attr= class="matlab"-->
			<p>
				f = @(t,y) y.*(y-5).*(y+6); samplePlots244(f, -1, 6, -7, 6, 0, [-1,0.5,4,5], â€™râ€™)
			</p><!--</div attr= class="matlab">-->



			<p>
				The <c>â€˜râ€™</c> here indicates that this plot will be drawn in red and put on figure 2. If this is combined with the <c>quiver244</c> method, then it will overlay these red curves on top of the quiver plot drawn on figure 2.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				function bifDiag244(f, a_min, a_max, y_min, y_max)
			</p><!--</div attr= class="matlab">-->

			<p>
				This function will draw a bifurcation diagram for the given differential equation. <term>Note:</term> This function will need the optimization tool-box add-on for MATLAB in order to run correctly. As with the previous methods, it will not overwrite the figure. Example implementation:
			</p>

<!-- div attr= class="matlab"-->
			<p>
				f = @(a,y) y.^2 - a.^2; bifDiag244(f, -3, 3, -5, 5, 3);
			</p><!--</div attr= class="matlab">-->



<!-- div attr= class="matlab"-->
			<p>
				function quiver2D244(f,g, x_min, x_max, y_min, y_max, col)
			</p><!--</div attr= class="matlab">-->

			<p>
				This function does the same concept as <c>quiver244</c> but for the autonomous system of differential equations <me>\frac{dx}{dt} = f(x,y) \qquad \frac{dy}{dt} = g(x,y).</me> Example implementation:
			</p>

<!-- div attr= class="matlab"-->
			<p>
				f = @(x,y) 3.*x - 2.*x.*y; g = @(x,y) 2.*y - 3.*x.*y; quiver2D244(f,g, 0, 5, 0, 5, â€™gâ€™);
			</p><!--</div attr= class="matlab">-->



<!-- div attr= class="matlab"-->
			<p>
				function phaseLine(f, ymin, ymax)
			</p><!--</div attr= class="matlab">-->

			<p>
				This function draws a representation of the phase line for an autonomous first order differential equation <m>\frac{dy}{dt} = f(y)</m> from <m>y_{min}</m> to <m>y_{max}</m>. Example implementation:
			</p>

<!-- div attr= class="matlab"-->
			<p>
				f = @(y) y.*(y-3).*(y+2); phaseLine(f, -4, 5);
			</p><!--</div attr= class="matlab">-->



<!-- div attr= class="matlab"-->
			<p>
				function phasePortrait244(F, G, xmin, xmax, ymin, ymax, tmin, tmax, x0, y0)
			</p><!--</div attr= class="matlab">-->

			<p>
				This function draws a phase portrait for the two-component autonomous system <m>\frac{dx}{dt} = F(x,y)</m> and <m>\frac{dy}{dt} = G(x,y)</m>. The axes are fixed at <m>x_{min} \leq x \leq x_{max}</m> and <m>y_{min} \leq y \leq y_{max}</m>. Solution curves are drawn starting at the (potential list of) points <m>x_0</m> and <m>y_0</m>, and will assume these happen at <m>t=0</m>. The curves are drawn from <m>t_min</m> to <m>t_max</m>, and there will be a black dot plotted at <m>t_min</m> to indicate the direction of flow. Example implementation:
			</p>

<!-- div attr= class="matlab"-->
			<p>
				f = @(x,y) 2.*x - 3.* y; g = @(x,y) -3.*x + y; phasePortrait244(f, g, -3, 3, -3, 3, -2, 2, [1, 0, -1, 1, 0, -1], [1,1,1,-1,-1,-1]);
			</p><!--</div attr= class="matlab">-->



<!-- div attr= class="matlab"-->
			<p>
				function [t, y] = rungeKuttaMethod(f, dt, Tf, T0, y0)
			</p><!--</div attr= class="matlab">-->

<!-- div attr= class="matlab"-->
			<p>
				function [t,y] = rungeKuttaSystemMethod(f, T0, Tf, dt, y0)
			</p><!--</div attr= class="matlab">-->

			<p>
				These two methods use the Runge-Kutta method to numerically solve the differential equation <m>\frac{dy}{dt} = f(t,y)</m> or the system <m>\frac{d\vec{x}}{dt} = F(t, \vec{x})</m>. It will return the list of <m>t</m> and <m>y</m> values that are generated by this method.
			</p>

<!-- div attr= class="matlab"-->
			<p>
				function [S,I,R] = SIRModel_244(r, c, ICs, Tf)
			</p><!--</div attr= class="matlab">-->

<!-- div attr= class="matlab"-->
			<p>
				function [S,I,Q,R,D] = SIRQModel_244(alpha, beta, gamma, delta, eta, rho, ICs, Tf)
			</p><!--</div attr= class="matlab">-->

<!-- div attr= class="matlab"-->
			<p>
				function [S,I,Q,R,D] = SIRQVModel_244(alpha, beta, gamma, delta, eta, rho, zeta, ICs, Tf)
			</p><!--</div attr= class="matlab">-->

			<p>
				Each of these last three methods use the Runge Kutta method to numerical solve a disease modeling problem with their respective equations. The shared arguments are the initial conditions, which are a three or five component vector depending on the problem type, and the final time <m>T_f</m>. The step-size used is one day, and the method will return the list of time-stepped values for each population (every day) from <m>t=0</m> to <m>t=T_f</m>. For <m>SIR</m>, the equations are <me>\frac{dS}{dt} = - rSI \qquad \frac{dI}{dt} = rSI - cI \qquad \frac{dR}{dt} = cI.</me> For SIRQ, the equations are <me>\begin{split}
        \frac{dS}{dt} &amp;= -\alpha SI \\
        \frac{dI}{dt} &amp;= \alpha SI - \beta I - \gamma I - \delta I \\
        \frac{dQ}{dt} &amp;= \beta I - \eta Q - \rho Q \\
        \frac{dR}{dt} &amp;= \gamma I + \eta Q \\
        \frac{dD}{dt} &amp;= \delta I + \rho Q
    \end{split}</me> and for SIRQV, it is <me>\begin{split}
        \frac{dS}{dt} &amp;= -\alpha SI- \zeta S \\
        \frac{dI}{dt} &amp;= \alpha SI - \beta I - \gamma I - \delta I \\
        \frac{dQ}{dt} &amp;= \beta I - \eta Q - \rho Q \\
        \frac{dR}{dt} &amp;= \gamma I + \eta Q  + \zeta S\\
        \frac{dD}{dt} &amp;= \delta I + \rho Q
    \end{split}</me> An example implementation is
			</p>

<!-- div attr= class="matlab"-->
			<p>
				= SIRModel_244(0.1, 0.2, [0.99; 0.01; 0], 400); [S,I,Q,R,D] = SIRQModel_244(0.15, 0.08, 0.02, 0.03, 0.01, 0.04, [0.95; 0.05; 0; 0; 0], 400); [S,I,Q,R,D] = SIRQVModel_244(0.15, 0.08, 0.02, 0.03, 0.01, 0.04,0.2, [0.95; 0.05; 0; 0; 0], 400);
			</p><!--</div attr= class="matlab">-->
		</section>

	</chapter>



