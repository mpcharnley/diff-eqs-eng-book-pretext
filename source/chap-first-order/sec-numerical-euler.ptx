<?xml version="1.0" encoding="UTF-8" ?>
<!-- Generated by Pandoc using pretext.lua -->



	<section xml:id="numer-section">
		<title>Numerical methods: Euler’s method</title>

		<p>
			Unless <m>f(x,y)</m> is of a special form, it is generally very hard if not impossible to get a nice formula for the solution of the problem 
<me>
y' = f(x,y), \qquad y(x_0) = y_0 .
</me>

		</p>

		<p>
			If the equation can be solved in closed form, we should do that. But what if we have an equation that cannot be solved in closed form? What if we want to find the value of the solution at some particular <m>x</m>? Or perhaps we want to produce a graph of the solution to inspect the behavior. In this section we will learn about the basics of numerical approximation of solutions.
		</p>

		<p>
			The simplest method for approximating a solution is <em><fn>		<p>
			Named after the Swiss mathematician <url href="https://en.wikipedia.org/wiki/Euler">Leonhard Paul Euler</url> (1707–1783). The correct pronunciation of the name sounds more like
		</p></fn></em>. It works as follows: Take <m>x_0</m> and compute the slope <m>k = f(x_0,y_0)</m>. The slope is the change in <m>y</m> per unit change in <m>x</m>. Follow the line for an interval of length <m>h</m> on the <m>x</m>-axis. Hence if <m>y = y_0</m> at <m>x_0</m>, then we say that <m>y_1</m> (the approximate value of <m>y</m> at <m>x_1 = x_0 + h</m>) is <m>y_1 = y_0 + h k</m>. Rinse, repeat! Let <m>k = f(x_1,y_1)</m>, and then compute <m>x_2 = x_1 + h</m>, and <m>y_2 = y_1 + h k</m>. Now compute <m>x_3</m> and <m>y_3</m> using <m>x_2</m> and <m>y_2</m>, etc. Consider the equation <m>y' = \nicefrac{y^2}{3}</m>, <m>y(0)=1</m>, and <m>h=1</m>. Then <m>x_0=0</m> and <m>y_0 = 1</m>. We compute <me>\begin{align*}
&amp; x_1 = x_0 + h = 0 + 1 = 1, &amp; &amp; y_1 = y_0 + h \, f(x_0,y_0) = 1 + 1 \cdot
\nicefrac{1^2}{3} = \nicefrac{4}{3} \approx 1.333,\\
&amp; x_2 = x_1 + h = 1 + 1 = 2, &amp; &amp; y_2 = y_1 + h \, f(x_1,y_1) =
\nicefrac{4}{3} + 1 \cdot \frac{{(\nicefrac{4}{3})}^2}{3} =
\nicefrac{52}{27} \approx 1.926.
\end{align*}</me> We then draw an approximate graph of the solution by connecting the points <m>(x_0,y_0)</m>, <m>(x_1,y_1)</m>, <m>(x_2,y_2)</m>,…. For the first two steps of the method see .
		</p>

<!-- div attr= class="myfig"-->
<!--</div attr= class="myfig">-->

		<p>
			More abstractly, for any <m>i=0,1,2,3,\ldots</m>, we compute 
<me>
x_{i+1} = x_i + h , \qquad y_{i+1}  = y_i + h\, f(x_i,y_i) .
</me>
 This can be worked out by hand for a few steps, but the formulas here lend themselves very well to being coded into a looping structure for more involved processes. The line segments we get are an approximate graph of the solution. Generally it is not exactly the solution. See for the plot of the real solution and the approximation.
		</p>

<!-- div attr= class="myfig"-->
<!--</div attr= class="myfig">-->

		<p>
			We continue with the equation <m>y' = \nicefrac{y^2}{3}</m>, <m>y(0)=1</m>. Let us try to approximate <m>y(2)</m> using Euler’s method. In Figures <xref ref="euler-step12-fig" /> and <xref ref="euler-step12-sol-fig" /> we have graphically approximated <m>y(2)</m> with step size 1. With step size 1, we have <m>y(2) \approx 1.926</m>. The real answer is 3. We are approximately 1.074 off. Let us halve the step size. Computing <m>y_4</m> with <m>h=0.5</m>, we find that <m>y(2) \approx 2.209</m>, so an error of about 0.791. gives the values computed for various parameters.
		</p>

<exercise>
<statement>
		<p>
			Solve this equation exactly and show that <m>y(2) = 3</m>.
		</p>
</statement>

<answer>		<p>
			The difference between the actual solution and the approximate solution is called the error. We usually talk about just the size of the error and we do not care much about its sign. The point is, we usually do not know the real solution, so we only have a vague understanding of the error. If we knew the error exactly …what is the point of doing the approximation?
		</p>
</answer>
</exercise>

<!-- div attr= class="center"-->
<!-- div attr= xml:id="euler-table-table"-->
		<table>
			<title>Euler’s method approximation of <m>y(2)</m> where of <m>y'=\nicefrac{y^2}{3}</m>, <m>y(0)=1</m>.</title>
			<tabular>
			<row header="yes">
				<cell halign="right"><m>h</m></cell>
				<cell halign="right">Approximate <m>y(2)</m></cell>
				<cell halign="right">Error</cell>
				<cell halign="right"><m>\frac{\text{Error}}{\text{Previous error}}</m></cell>
			</row>
			<row class="odd">
				<cell halign="right">1</cell>
				<cell halign="right">1.92593</cell>
				<cell halign="right">1.07407</cell>
				<cell halign="right"></cell>
			</row>
			<row class="even">
				<cell halign="right">0.5</cell>
				<cell halign="right">2.20861</cell>
				<cell halign="right">0.79139</cell>
				<cell halign="right">0.73681</cell>
			</row>
			<row class="odd">
				<cell halign="right">0.25</cell>
				<cell halign="right">2.47250</cell>
				<cell halign="right">0.52751</cell>
				<cell halign="right">0.66656</cell>
			</row>
			<row class="even">
				<cell halign="right">0.125</cell>
				<cell halign="right">2.68034</cell>
				<cell halign="right">0.31966</cell>
				<cell halign="right">0.60599</cell>
			</row>
			<row class="odd">
				<cell halign="right">0.0625</cell>
				<cell halign="right">2.82040</cell>
				<cell halign="right">0.17960</cell>
				<cell halign="right">0.56184</cell>
			</row>
			<row class="even">
				<cell halign="right">0.03125</cell>
				<cell halign="right">2.90412</cell>
				<cell halign="right">0.09588</cell>
				<cell halign="right">0.53385</cell>
			</row>
			<row class="odd">
				<cell halign="right">0.015625</cell>
				<cell halign="right">2.95035</cell>
				<cell halign="right">0.04965</cell>
				<cell halign="right">0.51779</cell>
			</row>
			<row class="even">
				<cell halign="right">0.0078125</cell>
				<cell halign="right">2.97472</cell>
				<cell halign="right">0.02528</cell>
				<cell halign="right">0.50913</cell>
			</row>
			</tabular>
		</table><!--</div attr= xml:id="euler-table-table">--><!--</div attr= class="center">-->

		<p>
			Notice that except for the first few times, every time we halved the step size the error approximately halved. This halving of the error is a general feature of Euler’s method as it is a <em></em>. There exists an improved Euler method, see the exercises, which is a . A second order method reduces the error to approximately one quarter every time we halve the interval. The meaning of order is the squaring in <m>\nicefrac{1}{4} = \nicefrac{1}{2} \times
\nicefrac{1}{2} = {(\nicefrac{1}{2})}^2</m>.
		</p>

		<p>
			To get the error to be within 0.1 of the answer we had to already do 64 steps. To get it to within 0.01 we would have to halve another three or four times, meaning doing 512 to 1024 steps. That is quite a bit to do by hand. The improved Euler method from the exercises should quarter the error every time we halve the interval, so we would have to approximately do half as many to get the same error. This reduction can be a big deal. With 10 halvings (starting at <m>h=1</m>) we have 1024 steps, whereas with 5 halvings we only have to do 32 steps, assuming that the error was comparable to start with. A computer may not care about this difference for a problem this simple, but suppose each step would take a second to compute (the function may be substantially more difficult to compute than <m>\nicefrac{y^2}{3}</m>). Then the difference is 32 seconds versus about 17 minutes. We are not being altogether fair, a second order method would probably double the time to do each step. Even so, it is 1 minute versus 17 minutes. Next, suppose that we have to repeat such a calculation for different parameters a thousand times. You get the idea.
		</p>

		<p>
			Note that in practice we do not know how large the error is! How do we know what is the right step size? Well, essentially we keep halving the interval, and if we are lucky, we can estimate the error from a few of these calculations and the assumption that the error goes down by a factor of one half each time (if we are using standard Euler).
		</p>

<exercise>
<statement>
		<p>
			In the table above, suppose you do not know the error. Take the approximate values of the function in the last two lines, assume that the error goes down by a factor of 2. Can you estimate the error in the last time from this? Does it (approximately) agree with the table? Now do it for the first two rows. Does this agree with the table?
		</p>
</statement>

<answer>		<p>
			Let us talk a little bit more about the example <m>y' = \frac{y^2}{3}</m>, <m>y(0) =
1</m>. Suppose that instead of the value <m>y(2)</m> we wish to find <m>y(3)</m>. The results of this effort are listed in for successive halvings of <m>h</m>. What is going on here? Well, you should solve the equation exactly and you will notice that the solution does not exist at <m>x=3</m>. In fact, the solution goes to infinity when you approach <m>x=3</m>.
		</p>
</answer>
</exercise>

<!-- div attr= class="center"-->
<!-- div attr= xml:id="euler-table2-table"-->
		<table>
			<title>Attempts to use Euler’s to approximate <m>y(3)</m> where of <m>y'=\nicefrac{y^2}{3}</m>, <m>y(0)=1</m>.</title>
			<tabular>
			<row header="yes">
				<cell halign="right"><m>h</m></cell>
				<cell halign="right">Approximate <m>y(3)</m></cell>
			</row>
			<row class="odd">
				<cell halign="right">1</cell>
				<cell halign="right">3.16232</cell>
			</row>
			<row class="even">
				<cell halign="right">0.5</cell>
				<cell halign="right">4.54329</cell>
			</row>
			<row class="odd">
				<cell halign="right">0.25</cell>
				<cell halign="right">6.86079</cell>
			</row>
			<row class="even">
				<cell halign="right">0.125</cell>
				<cell halign="right">10.80321</cell>
			</row>
			<row class="odd">
				<cell halign="right">0.0625</cell>
				<cell halign="right">17.59893</cell>
			</row>
			<row class="even">
				<cell halign="right">0.03125</cell>
				<cell halign="right">29.46004</cell>
			</row>
			<row class="odd">
				<cell halign="right">0.015625</cell>
				<cell halign="right">50.40121</cell>
			</row>
			<row class="even">
				<cell halign="right">0.0078125</cell>
				<cell halign="right">87.75769</cell>
			</row>
			</tabular>
		</table><!--</div attr= xml:id="euler-table2-table">--><!--</div attr= class="center">-->

		<p>
			Another case where things go bad is if the solution oscillates wildly near some point. The solution may exist at all points, but even a much better numerical method than Euler would need an insanely small step size to approximate the solution with reasonable precision. And computers might not be able to easily handle such a small step size.
		</p>

		<p>
			In real applications we would not use a simple method such as Euler's. The simplest method that would probably be used in a real application is the standard Runge–Kutta method (see exercises). That is a , meaning that if we halve the interval, the error generally goes down by a factor of 16 (it is fourth order as <m>\nicefrac{1}{16} =
\nicefrac{1}{2} \times \nicefrac{1}{2}
\times \nicefrac{1}{2} \times \nicefrac{1}{2}</m>).
		</p>

		<p>
			Choosing the right method to use and the right step size can be very tricky. There are several competing factors to consider.
		</p>

		<p><ul>
			<li>
					<p>
						Computational time: Each step takes computer time. Even if the function <m>f</m> is simple to compute, we do it many times over. Large step size means faster computation, but perhaps not the right precision.
					</p>
			</li>

			<li>
					<p>
						Roundoff errors: Computers only compute with a certain number of significant digits. Errors introduced by rounding numbers off during our computations become noticeable when the step size becomes too small relative to the quantities we are working with. So reducing step size may in fact make errors worse. There is a certain optimum step size such that the precision increases as we approach it, but then starts getting worse as we make our step size smaller still. Trouble is: this optimum may be hard to find.
					</p>
			</li>

			<li>
					<p>
						Stability: Certain equations may be numerically unstable. What may happen is that the numbers never seem to stabilize no matter how many times we halve the interval. We may need a ridiculously small interval size, which may not be practical due to roundoff errors or computational time considerations. Such problems are sometimes called <em>stiff</em>. In the worst case, the numerical computations might be giving us bogus numbers that look like a correct answer. Just because the numbers seem to have stabilized after successive halving, does not mean that we must have the right answer.
					</p>
			</li>

		</ul></p>

		<p>
			We have seen just the beginnings of the challenges that appear in real applications. Numerical approximation of solutions to differential equations is an active research area for engineers and mathematicians. For example, the general purpose method used for the ODE solver in Matlab and Octave (as of this writing) is a method that appeared in the literature only in the 1980s.
		</p>

		<p>
			The method used in Matlab and Octave is a fair bit different from the methods discussed previously. We don’t need to go too much in detail about it, but some information will be helpful. The main difference that will be visible when running these methods is that they are <em>adaptive</em> method. This means that they adjust the step-size based on what the differential equation looks like at a given point. Euler’s method, along with the improved Euler and Runge-Kutta methods, is a fixed step-size method, where the steps are always the same no matter what. Adaptive methods are harder to write and optimize, but can solve many problems faster because the adaptive nature of the method allows them to get similar accuracy to fixed step methods, but at many fewer steps. In the example below, the initial value problem 
<me>
\frac{dy}{dt} = y \qquad y(0) = 1
</me>
 is solved with an Euler’s method and Matlab’s built-in <c>ode45</c> method. Both of the solutions are plotted along with the actual solution <m>y = e^t</m>
		</p>

<!-- div attr= class="myfig"-->
<!--</div attr= class="myfig">-->

		<p>
			The Euler’s method takes 60 steps in this computation, but is still not as accurate as the <c>ode45</c> method, which only takes 45 steps. In addition, the black diamonds, representing the different values computed by <c>ode45</c> are not evenly spaced, illustrating the adaptive nature of this solver, while the red stars are all evenly spaced in the <m>t</m>-direction, as is expected from Euler’s method.
		</p>


<exercises>
			<title>Exercises</title>

<exercise>
<statement>
			<p>
				Consider <m>\dfrac{dx}{dt} = {(2t-x)}^2</m>, <m>x(0)=2</m>. Use Euler’s method with step size <m>h=0.5</m> to approximate <m>x(1)</m>.
			</p>
</statement>

<answer>			<p>
				 17/2 
			</p>
</answer>
</exercise>

<exercise>
<statement>
			<p>
				Consider the differential equation <m>\frac{dy}{dt} = t^2 - 3y + 1</m> with <m>y(1) = 4</m>. Approximate the solution at <m>t=3</m> using Euler’s method with a step size of <m>h=1</m> and <m>h=0.5</m>. Compare these values with the actual solution at <m>t=3</m>.
			</p>
</statement>

<answer>			<p>
				 <m>h=1</m>: 17, <m>h=0.5</m>: 85/32, Actual: <m>\frac{52}{27} + \frac{94}{27}e^{-6} \approx 1.9346</m> 
			</p>
</answer>
</exercise>

<exercise>
<statement>
			<p>
				Consider the differential equation <m>\frac{dy}{dt} = 2ty + y^2</m> with <m>y(0) = 1</m>. Approximate the solution at <m>t=2</m> using Euler’s method with a step size of <m>h=1</m> and <m>h=0.5</m>.
			</p>
</statement>

<answer>			<p>
				 <m>h=1</m>: 10, <m>h=0.5</m>: <m>y(2) \approx 108.56</m> 
			</p>
</answer>
</exercise>

<!-- div attr= class="samepage"-->
<exercise>
<statement>
			<p>
				Consider <m>\dfrac{dx}{dt} = t-x</m>, <m>x(0)=1</m>.
			</p>

<!-- div attr= class="tasks"-->
			<p>
				Use Euler’s method with step sizes <m>h = 1, \nicefrac{1}{2}, \nicefrac{1}{4}, \nicefrac{1}{8}</m> to approximate <m>x(1)</m>. Solve the equation exactly. Describe what happens to the errors for each <m>h</m> you used. That is, find the factor by which the error changed each time you halved the interval.
			</p><!--</div attr= class="tasks">--><!--</div attr= class="samepage">-->
</statement>

<answer>			<p>
				 a)  <m>h=1</m>, 0. <m>h=\nicefrac{1}{2}</m>, 0.5. <m>h = \nicefrac{1}{4}</m>,<m>\frac{81}{128}</m>. <m>h = \nicefrac{1}{8}</m> <m>x(1) \approx .6872</m>.<!-- linebreak -->b) <m>x(t) = t-1+2e^{-t}</m><!-- linebreak -->c) Error decreases by factors of 0.32, 0.4365, 0.4723. 
			</p>
</answer>
</exercise>

<exercise>
<statement>
			<p>
				Let <m>x' = \sin(xt)</m>, and <m>x(0)=1</m>. Approximate <m>x(1)</m> using Euler’s method with step sizes 1, 0.5, 0.25. Use a calculator and compute up to 4 decimal digits.
			</p>
</statement>

</exercise>
<exercise>
<statement>
			<p>
				Approximate the value of <m>e</m> by looking at the initial value problem <m>y'=y</m> with <m>y(0)=1</m> and approximating <m>y(1)</m> using Euler’s method with a step size of <m>0.2</m>.
			</p>
</statement>

<answer>			<p>
				 2.4883 
			</p>
</answer>
</exercise>

<exercise>
<statement>
			<p>
				Let <m>x' = 2t</m>, and <m>x(0)=0</m>.
			</p>

<!-- div attr= class="tasks"-->
			<p>
				Approximate <m>x(4)</m> using Euler’s method with step sizes 4, 2, and 1. Solve exactly, and compute the errors. Compute the factor by which the errors changed.
			</p><!--</div attr= class="tasks">-->
</statement>

</exercise>
<!-- div attr= class="samepage"-->
<exercise>
<statement>
			<p>
				Let <m>x' = x e^{xt+1}</m>, and <m>x(0)=0</m>.
			</p>

<!-- div attr= class="tasks"-->
			<p>
				Approximate <m>x(4)</m> using Euler’s method with step sizes 4, 2, and 1. Guess an exact solution based on part a) and compute the errors.
			</p><!--</div attr= class="tasks">--><!--</div attr= class="samepage">-->
</statement>

</exercise>
<exercise>
<statement>
			<p>
				Example of numerical instability: Take <m>y' = -5y</m>, <m>y(0) = 1</m>. We know that the solution should decay to zero as <m>x</m> grows. Using Euler’s method, start with <m>h=1</m> and compute <m>y_1, y_2, y_3, y_4</m> to try to approximate <m>y(4)</m>. What happened? Now halve the interval. Keep halving the interval and approximating <m>y(4)</m> until the numbers you are getting start to stabilize (that is, until they start going towards zero). Note: You might want to use a calculator.
			</p>
</statement>

<answer>			<p>
				 For <m>h=1</m>, <m>y_4 = 256</m>. <m>h=0.5</m>, <m>y_4 = 25.6289</m>, <m>h=0.25</m> goes to zero, but oscillates. <m>h=0.125</m> just goes to zero. 
			</p>
</answer>
</exercise>
<exercise>
	<statement>
			<p>
				There is a simple way to improve Euler’s method to make it a second order method by doing just one extra step. Consider <m>\frac{dy}{dx}=f(x,y)</m>, <m>y(x_0) = y_0</m>, and a step size <m>h</m>. What we do is to pretend we compute the next step as in Euler, that is, we start with <m>(x_i,y_i)</m>, we compute a slope <m>k_1 = f(x_i,y_i)</m>, and then look at the point <m>(x_i+h,y_i + k_1h)</m>. Instead of letting our new point be <m>(x_i+h,y_i + k_1h)</m>, we compute the slope at that point, call it <m>k_2</m>, and then take the average of <m>k_1</m> and <m>k_2</m>, hoping that the average is going to be closer to the actual slope on the interval from <m>x_i</m> to <m>x_i+h</m>. And we are correct, if we halve the step, the error should go down by a factor of <m>2^2 = 4</m>. To summarize, the setup is the same as for regular Euler, except the computation of <m>y_{i+1}</m> and <m>x_{i+1}</m>. <me>\begin{align*}
&amp; k_1 = f(x_i,y_i) , &amp; &amp; 
x_{i+1} = x_i + h , \\
&amp; k_2 = f(x_i + h,y_i + k_1h) ,
&amp; &amp; y_{i+1} = y_i + \frac{k_1+k_2}{2}\,h .
\end{align*}</me>
			</p>



			<p>
				Consider <m>\dfrac{dy}{dx} = x+y</m>, <m>y(0)=1</m>.
			</p>

<!-- div attr= class="tasks"-->
			<p>
				Use the improved Euler’s method (see above) with step sizes <m>h=\nicefrac{1}{4}</m> and <m>h=\nicefrac{1}{8}</m> to approximate <m>y(1)</m>. Use Euler’s method with <m>h=\nicefrac{1}{4}</m> and <m>h=\nicefrac{1}{8}</m>. Solve exactly, find the exact value of <m>y(1)</m>. Compute the errors, and the factors by which the errors changed.
			</p><!--</div attr= class="tasks">-->
</statement>

<answer>			<p>
				The simplest method used in practice is the <em></em>. Consider <m>\frac{dy}{dx}=f(x,y)</m>, <m>y(x_0) = y_0</m>, and a step size <m>h</m>. Everything is the same as in Euler’s method, except the computation of <m>y_{i+1}</m> and <m>x_{i+1}</m>. <me>\begin{align*}
&amp; k_1 = f(x_i,y_i) , &amp; &amp; \\
&amp; k_2 = f\bigl(x_i + \nicefrac{h}{2},y_i + k_1 (\nicefrac{h}{2})\bigr) ,
&amp; &amp; 
x_{i+1} = x_i + h , \\
&amp; k_3 = f\bigl(x_i + \nicefrac{h}{2},y_i + k_2 (\nicefrac{h}{2})\bigr) ,
&amp; &amp;
y_{i+1} = y_i + \frac{k_1 + 2k_2 + 2k_3 + k_4}{6}\,h ,  \\
&amp; k_4 = f(x_i + h,y_i + k_3 h) .
\end{align*}</me>
			</p>
</answer>
</exercise>

<exercise>
<statement>
			<p>
				Consider <m>\dfrac{dy}{dx} = yx^2</m>, <m>y(0)=1</m>.
			</p>

<!-- div attr= class="tasks"-->
			<p>
				Use Runge–Kutta (see above) with step sizes <m>h=1</m> and <m>h=\nicefrac{1}{2}</m> to approximate <m>y(1)</m>. Use Euler’s method with <m>h=1</m> and <m>h=\nicefrac{1}{2}</m>. Solve exactly, find the exact value of <m>y(1)</m>, and compare.
			</p><!--</div attr= class="tasks">-->
</statement>

<answer>			<p>
				 a)  <m>h=1</m> gives 1.3906. <m>h=0.5</m> gives 1.3953. b)  <m>h=1</m> gives 1. <m>h=0.5</m> gives 1.125. c)  Exact: 1.3956. Runge–Kutta matches three decimal places at <m>h=0.5</m>. Euler needs to go to <m>h=0.005</m> to get the first two decimals right. 
			</p>
</answer>
</exercise>
</exercises>

	</section>



